// Copyright (C) 2024 akuker
// Copyright (C) 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program. If not, see <https://www.gnu.org/licenses/>.
//
// This is based on the example implementation for the FreeRTOS Plus CLI at:
//    https://www.freertos.org/Documentation/03-Libraries/02-FreeRTOS-plus/03-FreeRTOS-plus-CLI/06-A-FreeRTOS-plus-CLI-task


#include "cmd_console_task.h"
#include "FreeRTOS.h"
#include <stdio.h>
#include <memory.h>
#include "freertos_cli_commands.h"

#ifdef __cplusplus
extern "C"
{
#endif
#include "FreeRTOS_CLI.h"
#ifdef __cplusplus
}
#endif

#define MAX_INPUT_LENGTH 50
#define MAX_OUTPUT_LENGTH 100

static const char *const pcWelcomeMessage =
    "BlueSCSI command server.\r\nType Help to view a list of registered commands.\r\n";

/* This function implements the behaviour of a command, so must have the correct
   prototype. */
static BaseType_t prvPingCommand(char *pcWriteBuffer,
                                 size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
    char *pcParameter1;
    BaseType_t xParameter1StringLength;//, xParameter2StringLength, xResult;

    /* Obtain the name of the source file, and the length of its name, from
       the command string. The name of the source file is the first parameter. */
    pcParameter1 = (char *)FreeRTOS_CLIGetParameter(
        pcCommandString, /* The command string itself. */
        1, /* Return the first parameter. */
        &xParameter1StringLength); /* Store the parameter string length. */

    /* Terminate both file names. */
    pcParameter1[xParameter1StringLength] = 0x00;
    // pcParameter2[xParameter2StringLength] = 0x00;

    /* Echo back our response */
    snprintf(pcWriteBuffer, xWriteBufferLen, "<Pong> \"%s\"\n\r", pcParameter1);

    /* There is only a single line of output produced in all cases. pdFALSE is
       returned because there is no more output to be generated. */
    return pdFALSE;
}

static const CLI_Command_Definition_t xPingCommand =
    {
        "ping",
        "ping <message>: Replies pong with the message entered",
        prvPingCommand,
        1};

void vCommandConsoleTask(void *pvParameters)
{
    // Peripheral_Descriptor_t xConsole;
    int8_t cRxedChar, cInputIndex = 0;
    BaseType_t xMoreDataToFollow;
    /* The input and output buffers are declared static to keep them off the stack. */
    static char pcOutputString[MAX_OUTPUT_LENGTH], pcInputString[MAX_INPUT_LENGTH];

    /* Register a basic command as an example */
    FreeRTOS_CLIRegisterCommand(&xPingCommand);
    vRegisterSampleCLICommands();

    /* This code assumes the peripheral being used as the console has already
       been opened and configured, and is passed into the task as the task
       parameter. Cast the task parameter to the correct type. */
    // xConsole = ( Peripheral_Descriptor_t ) pvParameters;

    /* Send a welcome message to the user knows they are connected. */
    // FreeRTOS_write( xConsole, pcWelcomeMessage, strlen( pcWelcomeMessage ) );
    printf(pcWelcomeMessage);

    for (;;)
    {
        /* This implementation reads a single character at a time. Wait in the
           Blocked state until a character is received. */
        // FreeRTOS_read( xConsole, &cRxedChar, sizeof( cRxedChar ) );
        cRxedChar = getchar();

        if (cRxedChar == '\n')
        {
            /* A newline character was received, so the input command string is
               complete and can be processed. Transmit a line separator, just to
               make the output easier to read. */
            // FreeRTOS_write( xConsole, "\r\n", strlen( "\r\n" );
            printf("\r\n");

            /* The command interpreter is called repeatedly until it returns
               pdFALSE. See the "Implementing a command" documentation for an
               exaplanation of why this is. */
            do
            {
                /* Send the command string to the command interpreter. Any
                   output generated by the command interpreter will be placed in the
                   pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(
                    pcInputString,    /* The command string.*/
                    pcOutputString,   /* The output buffer. */
                    MAX_OUTPUT_LENGTH /* The size of the output buffer. */
                );

                /* Write the output generated by the command interpreter to the
                   console. */
                // FreeRTOS_write( xConsole, pcOutputString, strlen( pcOutputString ) );
                printf(pcOutputString);

            } while (xMoreDataToFollow != pdFALSE);

            /* All the strings generated by the input command have been sent.
               Processing of the command is complete. Clear the input string ready
               to receive the next command. */
            cInputIndex = 0;
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
        }
        else
        {
            /* The if() clause performs the processing after a newline character
               is received. This else clause performs the processing if any other
               character is received. */

            if (cRxedChar == '\r')
            {
                /* Ignore carriage returns. */
            }
            else if (cRxedChar == '\b')
            {
                /* Backspace was pressed. Erase the last character in the input
                   buffer - if there are any. */
                if (cInputIndex > 0)
                {
                    cInputIndex--;
                    pcInputString[cInputIndex] = '\0';
                }
            }
            else
            {
                /* A character was entered. It was not a new line, backspace
                   or carriage return, so it is accepted as part of the input and
                   placed into the input buffer. When a n is entered the complete
                   string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH)
                {
                    pcInputString[cInputIndex] = cRxedChar;
                    cInputIndex++;
                }
            }
        }
    }
}
